// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: homegateway.proto

package homegatewayservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HomeGatewayClient is the client API for HomeGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeGatewayClient interface {
	GetDeviceInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DeviceInfo, error)
}

type homeGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeGatewayClient(cc grpc.ClientConnInterface) HomeGatewayClient {
	return &homeGatewayClient{cc}
}

func (c *homeGatewayClient) GetDeviceInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, "/homegateway.HomeGateway/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeGatewayServer is the server API for HomeGateway service.
// All implementations must embed UnimplementedHomeGatewayServer
// for forward compatibility
type HomeGatewayServer interface {
	GetDeviceInfo(context.Context, *EmptyRequest) (*DeviceInfo, error)
	mustEmbedUnimplementedHomeGatewayServer()
}

// UnimplementedHomeGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedHomeGatewayServer struct {
}

func (UnimplementedHomeGatewayServer) GetDeviceInfo(context.Context, *EmptyRequest) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedHomeGatewayServer) mustEmbedUnimplementedHomeGatewayServer() {}

// UnsafeHomeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeGatewayServer will
// result in compilation errors.
type UnsafeHomeGatewayServer interface {
	mustEmbedUnimplementedHomeGatewayServer()
}

func RegisterHomeGatewayServer(s grpc.ServiceRegistrar, srv HomeGatewayServer) {
	s.RegisterService(&HomeGateway_ServiceDesc, srv)
}

func _HomeGateway_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeGatewayServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homegateway.HomeGateway/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeGatewayServer).GetDeviceInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeGateway_ServiceDesc is the grpc.ServiceDesc for HomeGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homegateway.HomeGateway",
	HandlerType: (*HomeGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceInfo",
			Handler:    _HomeGateway_GetDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "homegateway.proto",
}
